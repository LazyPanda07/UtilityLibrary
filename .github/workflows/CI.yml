name: CI


on:
  push:
    branches: [master, dev]
  

jobs:
  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]

    steps:
    - uses: actions/checkout@v4
  
    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DBUILD_SHARED_LIBS=${{ matrix.shared[0] }} -G "NMake Makefiles" ..
          nmake install

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Windows
        path: build/install-dir/


  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]

    steps:
    - uses: actions/checkout@v4
  
    - name: Build
      run: |
          export CC=/usr/bin/gcc-13
          export CXX=/usr/bin/g++-13
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DBUILD_SHARED_LIBS=${{ matrix.shared[0] }} ..
          make install -j $(nproc)

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Linux
        path: build/install-dir


  windows-tests:
    runs-on: windows-latest
    needs: windows-build
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]

    steps:
    - uses: actions/checkout@v4
  
    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with: 
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Windows
        path: UtilityLibrary

    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1
      with:
        build-type: ${{ matrix.configuration }}
        install-path: Tests/gtest
        
    - name: Build tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -G "NMake Makefiles" ..
          nmake install

    - name: Tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
          cd build/bin
          .\Tests.exe --int 1 --string data --bool --float 5.5 --values 1 --values 2 --values 3 --values 4 --values 5 --values 6

    - name: Build tests without ConsoleArgumentParser
      working-directory: ${{ github.workspace }}/Tests
      run: |
          rm build -r -force
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DNO_CONSOLE_ARGUMENT_PARSER=ON -G "NMake Makefiles" ..
          nmake install

    - name: Tests without ConsoleArgumentParser
      working-directory: ${{ github.workspace }}/Tests
      run: |
          cd build/bin
          .\Tests.exe --int 1 --string data --bool --float 5.5 --values 1 --values 2 --values 3 --values 4 --values 5 --values 6

    - name: Build tests without CSVParser
      working-directory: ${{ github.workspace }}/Tests
      run: |
          rm build -r -force
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DNO_CSV_PARSER=ON -G "NMake Makefiles" ..
          nmake install

    - name: Tests without CSVParser
      working-directory: ${{ github.workspace }}/Tests
      run: |
          cd build/bin
          .\Tests.exe --int 1 --string data --bool --float 5.5 --values 1 --values 2 --values 3 --values 4 --values 5 --values 6
    
    - name: Build tests without Timers
      working-directory: ${{ github.workspace }}/Tests
      run: |
          rm build -r -force
          mkdir build
          cd build
          cmake  -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DNO_TIMERS=ON -G "NMake Makefiles" ..
          nmake install

    - name: Tests without Timers
      working-directory: ${{ github.workspace }}/Tests
      run: |
          cd build/bin
          .\Tests.exe --int 1 --string data --bool --float 5.5 --values 1 --values 2 --values 3 --values 4 --values 5 --values 6


  linux-tests:
    runs-on: ubuntu-latest
    needs: linux-build
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]

    steps:
    - uses: actions/checkout@v4
  
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with: 
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Linux
        path: UtilityLibrary

    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1
      with:
        install-path: Tests/gtest
        
    - name: Build tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
          mkdir build
          cd build
          cmake ..
          make install -j $(nproc)

    - name: Tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
          cd build/bin
          ./Tests --int 1 --string data --bool --float 5.5 --values 1 --values 2 --values 3 --values 4 --values 5 --values 6

    - name: Build tests without ConsoleArgumentParser
      working-directory: ${{ github.workspace }}/Tests
      run: |
          rm -rf build
          mkdir build
          cd build
          cmake -DNO_CONSOLE_ARGUMENT_PARSER=ON ..
          make install -j $(nproc)

    - name: Tests without ConsoleArgumentParser
      working-directory: ${{ github.workspace }}/Tests
      run: |
          cd build/bin
          ./Tests --int 1 --string data --bool --float 5.5 --values 1 --values 2 --values 3 --values 4 --values 5 --values 6

    - name: Build tests without CSVParser
      working-directory: ${{ github.workspace }}/Tests
      run: |
          rm -rf build
          mkdir build
          cd build
          cmake -DNO_CSV_PARSER=ON ..
          make install -j $(nproc)

    - name: Tests without CSVParser
      working-directory: ${{ github.workspace }}/Tests
      run: |
          cd build/bin
          ./Tests --int 1 --string data --bool --float 5.5 --values 1 --values 2 --values 3 --values 4 --values 5 --values 6
    
    - name: Build tests without Timers
      working-directory: ${{ github.workspace }}/Tests
      run: |
          rm -rf build
          mkdir build
          cd build
          cmake -DNO_TIMERS=ON ..
          make install -j $(nproc)

    - name: Tests without Timers
      working-directory: ${{ github.workspace }}/Tests
      run: |
          cd build/bin
          ./Tests --int 1 --string data --bool --float 5.5 --values 1 --values 2 --values 3 --values 4 --values 5 --values 6

  publish:
    runs-on: windows-latest
    needs: [windows-tests, linux-tests]

    steps:
    - uses: actions/checkout@v4

    - uses: LazyPanda07/extract-current-branch@master

    - name: Setup release version variable
      shell: pwsh
      run: echo "UTILITY_LIBRARY_VERSION=$($($($(Select-String -Path .\include\Defines.h -Pattern utilityLibraryVersion) -split '( = )')[2].TrimEnd(';')).Trim('\"'))" >> $Env:GITHUB_ENV
      
    - name: Setup archive name variable
      shell: pwsh
      run: echo "UTILITY_LIBRARY_ARCHIVE_NAME=UtilityLibrary_${{ env.UTILITY_LIBRARY_VERSION }}.zip" >> $Env:GITHUB_ENV

    - name: Download artifacts
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: actions/download-artifact@v4
      
    - name: Create zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      shell: pwsh
      run: Compress-Archive -Path @("Debug", "DebugDLL", "Release", "ReleaseDLL", "ProductionRelease", "ProductionReleaseDLL", "include") -DestinationPath ${{ env.UTILITY_LIBRARY_ARCHIVE_NAME }}

    - name: Publish
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: svenstaro/upload-release-action@master
      with:
        tag: v${{ env.UTILITY_LIBRARY_VERSION }}
        file: ${{ env.UTILITY_LIBRARY_ARCHIVE_NAME }}
        